service: lambda-x-ray-demo

plugins:
  - serverless-iam-roles-per-function
  - serverless-lumigo

custom:
  lumigo:
    token: t_7afe5952d7644bd48a2f5

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: us-east-1
  tracing:
    apiGateway: true
    lambda: true
  environment:
    stage: ${self:provider.stage}
  eventBridge:
    useCloudFormation: true

functions:
  service-a:
    handler: functions/service-a.handler
    timeout: 10
    events:
      - http:
          path: /service-a
          method: get
    environment:
      BUCKET_NAME: !Ref S3Bucket
      TABLE_NAME: !Ref DynamoDB
      TOPIC_ARN: !Ref Topic
      QUEUE_URL: !Ref Queue
      FUNCTION_NAME: !Ref CallLambdaFunction
      STREAM_NAME: !Ref Kinesis
      BUS_NAME: !Ref EventBus
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: !GetAtt DynamoDB.Arn
      - Effect: Allow
        Action: s3:PutObject*
        Resource:
          - !GetAtt S3Bucket.Arn
          - !Sub ${S3Bucket.Arn}/*
      - Effect: Allow
        Action: sns:Publish
        Resource: !Ref Topic
      - Effect: Allow
        Action: sqs:SendMessage
        Resource: !GetAtt Queue.Arn
      - Effect: Allow
        Action: lambda:InvokeFunction
        Resource: !GetAtt CallLambdaFunction.Arn
      - Effect: Allow
        Action: kinesis:PutRecord
        Resource: !GetAtt Kinesis.Arn
      - Effect: Allow
        Action: events:PutEvents
        Resource: !GetAtt EventBus.Arn
      - Effect: Allow
        Action: xray:Put*
        Resource: '*'

  service-b:
    handler: functions/service-b.handler
    events:
      - http:
          path: /service-b
          method: get

  call:
    handler: functions/service-c.handler

  timeout:
    handler: functions/timeout.handler
    timeout: 1
    events:
      - http:
          path: demo/timeout
          method: get

  error:
    handler: functions/error.handler
    events:
      - http:
          path: demo/error
          method: get

  sns:
    handler: functions/sns.handler
    events:
      - sns:
          topicName: test-topic
          arn: !Ref Topic
          
  sqs:
    handler: functions/sqs.handler
    events:
      - sqs:
          arn: !GetAtt Queue.Arn
          batchSize: 10

  s3:
    handler: functions/s3.handler
    events:
      - s3:
          existing: true
          event: s3:ObjectCreated:*
          bucket: !Ref S3Bucket

  kinesis:
    handler: functions/kinesis.handler
    events:
      - stream:
          type: kinesis
          arn: !GetAtt Kinesis.Arn

  dynamodb:
    handler: functions/dynamodb.handler
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt DynamoDB.StreamArn

  eventbridge:
    handler: functions/event-bridge.handler
    events:
      - eventBridge:
          eventBus: !GetAtt EventBus.Name
          pattern:
            source: 
              - xray-test

# you can add CloudFormation resource templates here
resources:
  Resources:
    S3Bucket:
      Type: AWS::S3::Bucket

    DynamoDB:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    Topic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: test-topic

    Queue:
      Type: AWS::SQS::Queue

    QueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Statement: 
            - Action: 
                - SQS:SendMessage
              Effect: Allow
              Resource: !GetAtt Queue.Arn
              Principal:  
                Service: sns.amazonaws.com
        Queues:
          - !Ref Queue

    Subscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        Endpoint: !GetAtt Queue.Arn
        TopicArn: !Ref Topic

    Kinesis:
      Type: AWS::Kinesis::Stream
      Properties:
        ShardCount: 1

    EventBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: xray-test
